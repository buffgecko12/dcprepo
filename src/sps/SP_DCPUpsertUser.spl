CREATE OR REPLACE FUNCTION $DB_NAME$Views.SP_$DB_NAME$UpsertUser (
    pUserId INTEGER, 
    pUserName VARCHAR(50), 
    pUserType CHAR(2), 
    pFirstName VARCHAR(100), 
    pLastName VARCHAR(100), 
    pDefaultSignatureScanFile BYTEA,
    pPhoneNumber VARCHAR(25),
    pEmailAddress VARCHAR(250),
    pPassword VARCHAR(128),
    pReputationValue INTEGER,
    pLast_Login TIMESTAMPTZ
) 
RETURNS INTEGER AS $$
DECLARE 
	NewUserId INTEGER; -- Track how many new users were created
BEGIN   

	-- Get next userid value (for new user only)
	IF(pUserId IS NULL) THEN
	    SELECT * FROM SP_$DB_NAME$GetNextId('user') INTO NewUserId;		
    END IF;
    
    -- Upsert user
    INSERT INTO $DB_NAME$.Users(UserId, UserName, UserType, FirstName, LastName, DefaultSignatureScanFile, PhoneNumber, EmailAddress, Password, ReputationValue, Last_Login)
    VALUES(COALESCE(pUserId, NewUserId), pUserName, pUserType, pFirstName, pLastName, pDefaultSignatureScanFile, pPhoneNumber, pEmailAddress, pPassword, pReputationValue, pLast_Login)
    ON CONFLICT(UserId) DO UPDATE SET
	    FirstName = EXCLUDED.FirstName,
	    LastName = EXCLUDED.LastName,
	    DefaultSignatureScanFile = EXCLUDED.DefaultSignatureScanFile,
        UserName = EXCLUDED.UserName,
        UserType = EXCLUDED.UserType,
	    PhoneNumber = EXCLUDED.PhoneNumber,
	    EmailAddress = EXCLUDED.EmailAddress,
	    Password = COALESCE(EXCLUDED.Password, Users.Password), -- If no value provided, keep existing one (i.e. don't allow overwriting with NULL)
	    ReputationValue = COALESCE(EXCLUDED.ReputationValue, Users.ReputationValue), -- If no value provided, keep existing one (i.e. don't allow overwriting with NULL)
	    Last_Login = COALESCE(EXCLUDED.Last_Login, Users.Last_Login) -- If no value provided, keep existing one (i.e. don't allow overwriting with NULL)
    ;   
    
	-- Return new userid (if new user)
    RETURN NewUserId;   
END;
$$ LANGUAGE 'plpgsql';