CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPEvaluateContractParty(
    IN pContractId INTEGER,
    IN pPartyUserId INTEGER,
    IN pEvaluationInfo JSONB,
    IN pFeedback VARCHAR(500)
) 
RETURNS VOID AS $$
DECLARE
	bNewEvaluationFlag BOOLEAN;
BEGIN
	
	-- Save evaluation info
	WITH ins AS (
		INSERT INTO $APP_NAME$.Contract_Party_Evaluation (ContractId, PartyUserId, EvaluationInfo, Feedback, EvaluationTS) 
		VALUES (pContractId, pPartyUserId, pEvaluationInfo, pFeedback, CURRENT_TIMESTAMP)
		ON CONFLICT(ContractId, PartyUserId) DO NOTHING
		RETURNING 1 AS MyRow
	)
	SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END 
	FROM ins INTO bNewEvaluationFlag
	;
	
	-- Generate events / notifications
	-- Create temp table to store events (bulk)

	IF(bNewEvaluationFlag) THEN 
		
		-- Temp table to store new events (bulk)
		CREATE TEMPORARY TABLE IF NOT EXISTS tEvents (
			ContractId INTEGER,
			GoalId INTEGER,
			PartyUserId INTEGER,
			SourceEventId INTEGER
		);
		
		-- Generate events
		WITH src AS (
			SELECT TeacherRating, HighPerformers
			FROM JSONB_TO_RECORD(pEvaluationInfo) AS x (TeacherRating INTEGER, HighPerformers VARCHAR(20)[])
		) 
		INSERT INTO tEvents (ContractId, GoalId, PartyUserId, SourceEventId)
		-- Positive student feedback events
		SELECT pContractId, NULL, src.UserId, 2009 AS EventId
		FROM (
			-- For teacher (experience rating)
			SELECT c.TeacherUserId AS UserId
			FROM $APP_NAME$Views.Contract c
			CROSS JOIN src 
			WHERE ContractId = pContractId
			AND src.TeacherRating > 3 -- Only generate positive feedback event for teachers
			
			UNION ALL
		
			-- For student (high performer flag)
			SELECT CAST(UNNEST(src.HighPerformers) AS INTEGER) AS UserId
			FROM src
		) src
		INNER JOIN $APP_NAME$Views.Users u ON src.UserId = u.UserId	
		;
		
		-- Process new events (bulk)
		PERFORM $APP_NAME$Views.SP_DCPProcessUserEvent(NULL, NULL, NULL);
	END IF;
END
$$ LANGUAGE 'plpgsql';