CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPChangeContractStatus(
    pContractId INTEGER,
    pContractStatus CHAR(1)
) 
RETURNS VOID AS $$
DECLARE
	MyTeacherUserId INTEGER;
	OriginalContractStatus CHAR(1);
	RevisionFlag BOOLEAN;
BEGIN

	-- Get contract info
	SELECT 
		ContractStatus, 
		CASE WHEN TempContractId IS NOT NULL THEN TRUE ELSE FALSE END AS RevisionFlag 
	INTO OriginalContractStatus, RevisionFlag
	FROM $APP_NAME$.Contract
	WHERE ContractId = pContractId
	;
	
	-- Set contract status
	UPDATE $APP_NAME$.Contract
	SET ContractStatus = pContractStatus
	WHERE ContractId = pContractId
	;
	
	IF(pContractStatus = 'P') THEN
	
		-- Modify contract
		IF(OriginalContractStatus = 'P') THEN
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(NULL, 1102, pContractId); -- Contract modified
			
		-- New contract (only for non-revision)
		ELSEIF(OriginalContractStatus = 'D' AND NOT RevisionFlag) THEN
		
			-- Generate user notifications
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(NULL, 1104, pContractId); -- New contract to review
			
			SELECT TeacherUserId INTO MyTeacherUserId
			FROM $APP_NAME$Views.Contract
			WHERE ContractId = pContractId
			;
			
			-- Generate new "Send contract" event
			PERFORM $APP_NAME$Views.SP_DCPProcessUserEvent(MyTeacherUserId, 2014, pContractId);
		END IF;
	END IF;
END
$$ LANGUAGE 'plpgsql';
