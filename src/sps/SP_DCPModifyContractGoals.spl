CREATE OR REPLACE FUNCTION $DB_NAME$Views.SP_DCPModifyContractGoals(
    pContractId INTEGER,
    pGoalInfo JSONB
) 
RETURNS INTEGER AS $$
BEGIN
	
    -- Delete old goals (if applicable)
    IF(pGoalInfo->'deletedgoals') IS NOT NULL THEN
        DELETE FROM $DB_NAME$.Contract_Goal
        WHERE ContractId = pContractId
        AND GoalId IN (
            SELECT CAST(
                JSONB_ARRAY_ELEMENTS_TEXT(pGoalInfo->'deletedgoals') AS INTEGER
            )
        )
        ;
    END IF;
    
    -- Update current goals (if applicable)
    IF(pGoalInfo->'currentgoals') IS NOT NULL THEN 
	    INSERT INTO $DB_NAME$.Contract_Goal (ContractId, GoalId, DifficultyLevel, GoalDescription, AcceptedFlag, AchievedFlag)
		SELECT 
	        pContractId,
	        COALESCE(
	            src.GoalId, -- Use original GoalId if provided (otherwise generate new one)
	            COALESCE((SELECT MAX(GoalId) FROM $DB_NAME$.Contract_Goal WHERE ContractId = pContractId), 0) + -- Get max GoalId for this contract
	            ROW_NUMBER() OVER(PARTITION BY src.GoalId /* GROUP NULLs (new goals) into same partition */ ORDER BY src.GoalId) -- Generate new GoalId values
	        ) AS NewGoalId,
	        src.DifficultyLevel,
		    src.GoalDescription, 
		    src.AcceptedFlag,
		    src.AchievedFlag
		FROM JSONB_TO_RECORDSET(pGoalInfo->'currentgoals')
		  AS src(
		   goalId INTEGER, 
		   DifficultyLevel CHAR(1),
		   GoalDescription VARCHAR(500), 
		   AcceptedFlag BOOLEAN,
		   AchievedFlag BOOLEAN
	   ) -- Be careful with case-sensitivity with PG (use all lower-case values in JSON to be safe)    
	    ON CONFLICT (ContractId, GoalId) DO UPDATE SET 
			DifficultyLevel = EXCLUDED.DifficultyLevel,
	        GoalDescription = EXCLUDED.GoalDescription,
	        AcceptedFlag = EXCLUDED.AcceptedFlag,
	        AchievedFlag = EXCLUDED.AchievedFlag -- "excluded" stores rows that could not be inserted
	    ;
	END IF;
	    	
	-- Return contractId
    RETURN pContractId;
END
$$ LANGUAGE 'plpgsql';
