CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPEvaluateContract(
    IN pContractId INTEGER,
    IN pActionType VARCHAR(25),
    IN pActionCategory VARCHAR(50),
    IN pSubmitFlag BOOLEAN,
    IN pEvaluationInfo JSONB,
    IN pRewardInfo JSONB
) 
RETURNS VOID AS $$
DECLARE 
	OriginalStatus CHAR(1);
	bEvaluatedFlag BOOLEAN;
	ContractTeacherUserId INTEGER;
BEGIN
	
	-- Get initial contract info
	SELECT 
		ContractStatus, 
		CASE WHEN ContractEvaluationTS IS NOT NULL THEN TRUE ELSE FALSE END,
		TeacherUserId
	INTO OriginalStatus, bEvaluatedFlag, ContractTeacherUserId
	FROM $APP_NAME$Views.Contract
	WHERE ContractId = pContractId
	;

	-- Initiate evaluate contract
	IF(pActionType = 'evaluate') THEN

		-- Initiate "evaluation" (only if not already evaluated)
		IF(OriginalStatus = 'A' AND NOT bEvaluatedFlag) THEN

			-- Copy parties that accepted contract
			INSERT INTO $APP_NAME$.Contract_Party_Goal_Evaluation(ContractId, PartyUserId, GoalId)
			SELECT cg.ContractId, cpa.PartyUserId, cg.GoalId
			FROM $APP_NAME$Views.Contract_Goal cg
			INNER JOIN $APP_NAME$Views.Contract_Party_Approval cpa ON cg.ContractId = cpa.ContractId -- Get contract parties
			WHERE cg.ContractId = pContractId
			AND cg.AcceptedFlag IS TRUE -- Only get accepted goals
			AND cpa.PartyApprovalTS IS NOT NULL -- Only get parties that accepted the contract
			AND cpa.ApprovalType = 'C'
			ON CONFLICT (ContractId, PartyUserId, GoalId) DO NOTHING -- Ignore duplicates
			;
			
			-- Change status to 'Evaluation'
			PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'E');
		END IF;
			
	-- SAVE
	ELSEIF(pActionType = 'save') THEN

		-- EVALUATION
		IF(pActionCategory = 'evaluation' AND NOT bEvaluatedFlag) THEN 
		
			-- Save evaluation info
		    UPDATE $APP_NAME$.Contract_Party_Goal_Evaluation dest
		    SET AchievedFlag = src.AchievedFlag,
				ExperienceRating = src.ExperienceRating,
				HighPerformerFlag = src.HighPerformerFlag,
				TopPerformerFlag = src.TopPerformerFlag,
				FeedbackMsg = src.FeedbackMsg
			FROM JSONB_TO_RECORDSET(pEvaluationInfo) AS src (
				PartyUserId INTEGER,
				GoalId INTEGER,
				AchievedFlag BOOLEAN,
				ExperienceRating INTEGER,
				HighPerformerFlag BOOLEAN,
				TopPerformerFlag BOOLEAN,
				FeedbackMsg VARCHAR(500)
		    )
		    WHERE dest.ContractId = pContractId
		    AND dest.PartyUserId = src.PartyUserId
		    AND dest.GoalId = src.GoalId
			;

		-- REWARDS
		ELSEIF(pActionCategory = 'rewards' AND bEvaluatedFlag) THEN
		
			-- Save reward info
		    UPDATE $APP_NAME$.Contract_Party_Goal_Evaluation dest
		    SET RewardId = NULLIF(src.RewardId,0), -- 0 = no selection
				RewardDeliveredFlag = CASE WHEN NULLIF(src.RewardId,0) IS NULL THEN NULL ELSE src.RewardDeliveredFlag END, -- Clear field if no reward selected
				ActualRewardValue = CASE WHEN NULLIF(src.RewardId,0) IS NULL THEN NULL ELSE src.ActualRewardValue END -- Clear field if no reward selected
			FROM JSONB_TO_RECORDSET(pRewardInfo) AS src (
				PartyUserId INTEGER,
				GoalId INTEGER,
				RewardId INTEGER,
				RewardDeliveredFlag BOOLEAN,
				ActualRewardValue INTEGER
		    )
		    WHERE dest.ContractId = pContractId
		    AND dest.PartyUserId = src.PartyUserId
		    AND dest.GoalId = src.GoalId
			;
		END IF;
	END IF;
	
	-- SUBMIT
	IF(pSubmitFlag) THEN

		-- Temp table to store new events (bulk)
		CREATE TEMPORARY TABLE IF NOT EXISTS tEvents (
			ContractId INTEGER,
			GoalId INTEGER,
			PartyUserId INTEGER,
			SourceEventId INTEGER
		);
	
		-- EVALUATION
		IF(pActionCategory = 'evaluation' AND NOT bEvaluatedFlag) THEN 
		
			-- Generate events
			WITH cpge AS (
				-- Get party goals for given contract
				SELECT cg.ContractId, cg.GoalId, cg.DifficultyLevel, cpge.PartyUserId, cpge.AchievedFlag, cpge.ExperienceRating, cpge.HighPerformerFlag, cpge.TopPerformerFlag
				FROM $APP_NAME$Views.Contract_Goal cg
				INNER JOIN $APP_NAME$Views.Contract_Party_Goal_Evaluation cpge ON cg.ContractId = cpge.ContractId AND cg.GoalId = cpge.GoalId
				WHERE cpge.ContractId = pContractId
			)
			INSERT INTO tEvents (ContractId, GoalId, PartyUserId, SourceEventId)
			
			-- Completed goals
			SELECT ContractId, GoalId, PartyUserId, 2 AS EventId
			FROM cpge
			WHERE AchievedFlag IS TRUE -- Completed goals
			
			UNION ALL
	
			-- Completed goals (difficulty levels)
			SELECT 
				ContractId, 
				NULL AS GoalId,
				PartyUserId, 
				CASE DifficultyLevel 
					WHEN 'E' THEN 2003
					WHEN 'M' THEN 2004
					WHEN 'D' THEN 2005
				END AS EventId
			FROM cpge
			WHERE AchievedFlag IS TRUE
			GROUP BY ContractId, PartyUserId, DifficultyLevel
			HAVING COUNT(*) > 0
		
			UNION ALL
			
			-- High performer
			SELECT ContractId, GoalId, PartyUserId, 2006 AS EventId
			FROM cpge
			WHERE HighPerformerFlag IS TRUE
			
			UNION ALL
	
			-- Top performer
			SELECT ContractId, GoalId, PartyUserId, 2007 AS EventId
			FROM cpge
			WHERE TopPerformerFlag IS TRUE
			
			UNION ALL
		
			-- Receive positive/negative feedback rating (1 = worst, 5 = best)
			SELECT ContractId, GoalId, PartyUserId, EventId
			FROM (
				SELECT 
					ContractId, 
					GoalId,
					PartyUserId, 
					CASE 
						WHEN ExperienceRating = 1 THEN 2012 -- Generate negative event for "1" rating
						WHEN ExperienceRating > 3 THEN 2008 -- Generate "positive" event for "4/5" rating
					END AS EventId
				FROM cpge
			) src
			WHERE EventId IS NOT NULL
			;
			
			-- Include "Evaluate contract" event for teacher
			INSERT INTO tEvents (ContractId, GoalId, PartyUserId, SourceEventId)
			VALUES(pContractId, NULL, ContractTeacherUserId, 2015)
			;
			
			-- Mark contract as "evaluated"
			UPDATE $APP_NAME$.Contract
			SET ContractEvaluationTS = CURRENT_TIMESTAMP
			WHERE ContractId = pContractId
			;
			
		-- REWARDS
		ELSEIF(pActionCategory = 'rewards' AND bEvaluatedFlag) THEN
		
			-- Change status to 'Finalized'
			PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'F');
			
			-- Mark contract as finalize
			UPDATE $APP_NAME$.Contract
			SET ContractFinalizationTS = CURRENT_TIMESTAMP
			WHERE ContractId = pContractId
			;
		
		END IF;

		-- Process new events (bulk)
		PERFORM $APP_NAME$Views.SP_DCPProcessUserEvent(NULL, NULL, NULL);
	END IF;
END
$$ LANGUAGE 'plpgsql';