-- RETURNS SETOF <TABLE_NAME> -- uses table/view column definition
-- RETURNS record AS ... -- Anonymous records (no field names)
-- RETURNS TABLE (col1 int, col2 text, ...) AS -- explicit return type definition

-- RETURN QUERY -- adds query results to final resultset rows (doesn't return yet)

CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPGetUser(
    pUserId INTEGER,
    pUsername VARCHAR(50),
    pEmailAddress VARCHAR(250),
    pActiveFlag BOOLEAN
)
RETURNS TABLE (
	UserId INTEGER, SchoolId INTEGER, UserName VARCHAR(50), UserType CHAR(2), FirstName VARCHAR(100), LastName VARCHAR(100), UserDisplayName VARCHAR(250), 
	EmailAddress VARCHAR(250), Password VARCHAR(128), ReputationValue INTEGER, ReputationValueLastSeenTS TIMESTAMPTZ, ProfilePictureId INTEGER, 
	Last_Login TIMESTAMPTZ, Is_Active BOOLEAN,
	SchoolAbbreviation VARCHAR(25)
) AS $$
BEGIN
    RETURN QUERY
    -- Lookup a single user based on userid OR emailaddress / username
    SELECT u.UserId, u.SchoolId, u.UserName, u.UserType, u.FirstName, u.LastName, u.UserDisplayName, u.EmailAddress, u.Password, 
    u.ReputationValue, u.ReputationValueLastSeenTS, u.ProfilePictureId, u.Last_Login, u.Is_Active, s.SchoolAbbreviation
    FROM $APP_NAME$Views.Users u
    LEFT JOIN $APP_NAME$Views.School s ON u.SchoolId = s.SchoolId
    WHERE (u.UserId = pUserId OR pUserId IS NULL)
    AND (u.Username = pUsername OR pUsername IS NULL)
    AND 
    (
    	(
    		u.EmailAddress = pEmailAddress AND
    		TRIM(u.EmailAddress) <> '' -- Exclude empty e-mail addresses
		) OR 
    	pEmailAddress IS NULL
	)
    AND (
	    u.Is_Active = pActiveFlag OR
	    (pActiveFlag IS NULL AND u.Is_Active = TRUE) -- Default to "active"
    )
    ;
END;
$$ LANGUAGE 'plpgsql';