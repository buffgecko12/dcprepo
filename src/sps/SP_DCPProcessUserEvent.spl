CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPProcessUserEvent (
	pUserId INTEGER,
	pEventId INTEGER,
	pContractId INTEGER
)
RETURNS VOID AS $$
DECLARE
	MyRecord RECORD;
BEGIN   

	-- Temp table to store events
	CREATE TEMPORARY TABLE IF NOT EXISTS tEvents (
		ContractId INTEGER,
		GoalId INTEGER,
		PartyUserId INTEGER,
		SourceEventId INTEGER
	);

	-- Seed table with single user event (if provided)
	INSERT INTO tEvents(ContractId, GoalId, PartyUserId, SourceEventId)
	SELECT pContractId, NULL, pUserId, pEventId
	WHERE pUserId IS NOT NULL
	OR pEventId IS NOT NULL
	OR pContractId IS NOT NULL
	ON CONFLICT DO NOTHING
	;

	-- Update reputation info
	FOR MyRecord IN 
		WITH ins AS (
			INSERT INTO $APP_NAME$.User_Reputation_Event (UserId, SourceEventId, ContractId, PointValue, EventTS)
			SELECT ev.PartyUserId, ev.SourceEventId, ev.ContractId, le.DefaultReputationPointValue, CURRENT_TIMESTAMP
			FROM tEvents ev -- Get user events
			INNER JOIN $APP_NAME$Views.UsersActive u ON ev.PartyUserId = u.UserId -- Make sure user exists
--			LEFT JOIN $APP_NAME$Views.User_Reputation_Event ure ON ev.PartyUserId = ure.UserId AND ure.SourceEventId = ev.SourceEventId AND ure.ContractId = ev.ContractId -- Check if user already has this event for this contract
			INNER JOIN $APP_NAME$Views.Lookup_Event le ON ev.SourceEventId = le.EventId
			WHERE le.EventType = 'RP' -- Get reputation events only
--			AND 
--			(
--				(ev.SourceEventId = 2002 AND ure.UserId IS NULL) OR -- Ignore "accept goal" reputation event if user already has one for this contract
--				ev.SourceEventId <> 2002
--			)
			RETURNING UserId, PointValue
		),
		upd AS (
			UPDATE $APP_NAME$.Users dest
			SET ReputationValue = GREATEST(ReputationValue + AggPointValue, 0) -- Negative user reputation value not allowed
			FROM (
				SELECT ins.UserId, SUM(ins.PointValue) AggPointValue
				FROM ins
				GROUP BY ins.UserId
			) src
			WHERE dest.UserId = src.UserId
			RETURNING src.UserId, AggPointValue
		)
		SELECT UserId
		FROM upd
		WHERE AggPointValue > 0 -- Only look at positive-reputation value changes
	LOOP
		-- Create reputation notifications
		PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(MyRecord.UserId, 1001, NULL); -- New reputation points
	END LOOP;

	-- Add new badges & profile pictures
	FOR MyRecord IN 
		-- Get new badges
		WITH get_badges AS (
			SELECT badges.PartyUserId, badges.BadgeId, badges.BadgeLevel, MyBadgeRowNum, bpp.ProfilePictureId
			FROM (
				SELECT 
					ev.PartyUserId,
					lb.BadgeId, 
					lb.BadgeLevel,
					ROW_NUMBER() OVER(PARTITION BY ev.PartyUserId) AS MyBadgeRowNum -- Assign each earned badge a RowId
				FROM (
					-- Get distinct list of badge triggers
					SELECT DISTINCT PartyUserId, SourceEventId
					FROM (
						-- Event-specific triggers
						SELECT PartyUserId, SourceEventId
						FROM tEvents 
						
						UNION ALL
	
						-- Non-event-specific triggers
						SELECT PartyUserId, EventId
						FROM tEvents
						INNER JOIN $APP_NAME$Views.Lookup_Event le ON le.EventId = 1 -- Reputation thresholds
					) src
				) AS ev
				INNER JOIN $APP_NAME$Views.UsersActive u ON ev.PartyUserId = u.UserId -- Make sure user exists
				INNER JOIN $APP_NAME$Views.Lookup_Event le ON (ev.SourceEventId = le.EventId) -- Get event info
				INNER JOIN $APP_NAME$Views.Lookup_Badge lb ON le.EventId = lb.SourceEventId -- Look up badges associated with events
				WHERE NOT EXISTS(SELECT 1 FROM $APP_NAME$Views.User_Badge ub WHERE lb.BadgeId = ub.BadgeId AND ub.UserId = ev.PartyUserId) -- Exclude badges user has already earned
				AND 
				( 
					-- NON-EVENT TRIGGERED BADGES
					( -- Reputation threshold
						le.EventId = 1 AND 
						COALESCE(u.ReputationValue,0) >= lb.BadgeThresholdValue -- Check if user's reputation is greater than threshold values
					) OR
					-- EVENT TRIGGERED BADGES
					( 
						-- Non-threshold badges
						lb.BadgeThresholdValue IS NULL OR 
						-- Threshold badges
						(
							( -- Contracts sent (teacher)
								le.EventId = 2014 AND (
									SELECT COUNT(*)
									FROM $APP_NAME$Views.Contract c
									INNER JOIN $APP_NAME$Views.Contract_Party cp ON c.ContractId = cp.ContractId
									WHERE cp.TeacherUserId = ev.PartyUserId
								) >= lb.BadgeThresholdValue -- Check if number of contracts sent out has exceeded threshold value
							)
						)
					)
				)
			) badges
			LEFT JOIN ( -- Get all available (i.e. not already awarded) badge profile pictures, per user
				SELECT 
					ev.PartyUserId,
					lpp.ProfilePictureId, 
					lpp.BadgeLevel, 
					ROW_NUMBER() OVER(PARTITION BY ev.PartyUserId, lpp.BadgeLevel ORDER BY RANDOM()) MyProfilePictureRowNum -- Generate random ID values for each profilepicture (within badge level)
				FROM (
					SELECT DISTINCT PartyUserId
					FROM tEvents
				) ev -- Get distinct list of users
				CROSS JOIN $APP_NAME$Views.Lookup_Profile_Picture lpp
				LEFT JOIN $APP_NAME$Views.User_Profile_Picture upp ON upp.UserId = ev.PartyUserId AND upp.ProfilePictureId = lpp.ProfilePictureId
				WHERE upp.UserId IS NULL -- Exclude pictures user already has
			) bpp ON badges.PartyUserId = bpp.PartyUserId AND badges.BadgeLevel = bpp.BadgeLevel AND badges.MyBadgeRowNum = bpp.MyProfilePictureRowNum -- Assign a random profile picture to each earned badge
		),
		-- Insert new badges
		insert_badges AS (
			INSERT INTO $APP_NAME$.User_Badge (UserId, BadgeId, BadgeAchievedTS)
			SELECT PartyUserId, BadgeId, CURRENT_TIMESTAMP
			FROM get_badges
			ON CONFLICT(UserId, BadgeId) DO NOTHING -- Ignore duplicates
		),
		-- Insert new profile pictures
		insert_profile_pics AS (
			INSERT INTO $APP_NAME$.User_Profile_Picture (UserId, ProfilePictureId, SourceBadgeId, ProfilePictureAddedTS)
			SELECT PartyUserId, ProfilePictureId, BadgeId, CURRENT_TIMESTAMP
			FROM get_badges
		)
		-- Return users with new badges
		SELECT PartyUserId 
		FROM get_badges
	LOOP
		-- Create badge notifications
		PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(MyRecord.PartyUserId, 1002, NULL); -- New badges
	END LOOP;
	
	-- Drop temp table
	DROP TABLE tEvents;
END;
$$ LANGUAGE 'plpgsql';