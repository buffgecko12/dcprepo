CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPProcessUserEvent (
	pUserId INTEGER,
	pEventId INTEGER,
	pContractId INTEGER
)
RETURNS VOID AS $$
DECLARE
	NewReputationPointValueAgg INTEGER;
	NumBadgesAdded INTEGER;
BEGIN   

	-- Update reputation info
	WITH ins AS (
		INSERT INTO $APP_NAME$.User_Reputation_Event (UserId, SourceEventId, ContractId, PointValue, EventTS)
		SELECT pUserId, pEventId, pContractId, le.DefaultReputationPointValue, CURRENT_TIMESTAMP
		FROM $APP_NAME$Views.Users u 
		CROSS JOIN $APP_NAME$Views.Lookup_Event le
		WHERE u.UserId = pUserId
		AND le.EventId = pEventId
		AND le.EventType = 'RP' -- Get reputation events only
		RETURNING PointValue
	)
	SELECT COALESCE(SUM(PointValue),0) FROM ins INTO NewReputationPointValueAgg
	;

	-- If reputation values change, update value and create notification
	IF(NewReputationPointValueAgg <> 0) THEN
	
		-- Update reputation value
		UPDATE $APP_NAME$.Users
		SET ReputationValue = GREATEST(ReputationValue + NewReputationPointValueAgg,0) -- Negative user reputation value not allowed
		WHERE UserId = pUserId
		;

		-- Create new notification for positive-change reputation only
		IF(NewReputationPointValueAgg > 0) THEN
		
			-- Create reputation notification
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(pUserId, 1001, pContractId); -- New reputation points
		END IF;
		
	END IF;
	
	-- Add new badges
	WITH ins AS (
		INSERT INTO $APP_NAME$.User_Badge (UserId, BadgeId, BadgeAchievedTS, BadgeProfilePictureId)
		SELECT pUserId AS UserId, src.BadgeId, CURRENT_TIMESTAMP, src.ProfilePictureId
		FROM (
			SELECT 
				lb.BadgeId, 
				bpp.ProfilePictureId, 
				ROW_NUMBER() OVER(PARTITION BY lb.BadgeId ORDER BY RANDOM()) AS MyRowNum -- Randomly order rows (profile pictures) per badge
			FROM $APP_NAME$Views.Users u -- Get user info
			CROSS JOIN $APP_NAME$Views.Lookup_Event le -- Get event info
			INNER JOIN $APP_NAME$Views.Lookup_Badge lb ON le.EventId = lb.SourceEventId -- Look up badges associated with events
			LEFT JOIN ( -- Get all available badge profile pictures
				SELECT lbp.ProfilePictureId, lbp.BadgeLevel
				FROM $APP_NAME$Views.Lookup_Badge_Profile_Picture lbp
				WHERE ProfilePictureId NOT IN (
					SELECT BadgeProfilePictureId 
					FROM $APP_NAME$Views.User_Badge 
					WHERE UserId = pUserId
				) -- Only look at profile pictures for corresponding badge level
			) bpp ON lb.BadgeLevel = bpp.BadgeLevel
			WHERE u.UserId = pUserId -- Get info for user
			AND (
				le.EventId = pEventId OR -- Event-specific badges
				(
					le.EventId = 1 -- Reputation threshold badges
					AND COALESCE(u.ReputationValue,0) > lb.BadgeThresholdValue -- Check if user's reputation is greater than threshold values
				)
			)
		) src
		WHERE src.MyRowNum = 1 -- Get one row (profile picture) per badge
		ON CONFLICT(UserId, BadgeId) DO NOTHING -- Ignore duplicates
		RETURNING 1
	) 
	SELECT COALESCE(COUNT(*),0) FROM ins INTO NumBadgesAdded
	;

	-- If badges were added, generate notification
	IF(NumBadgesAdded > 0) THEN
		PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(pUserId, 1004, pContractId); -- New badges
	END IF;
END;
$$ LANGUAGE 'plpgsql';