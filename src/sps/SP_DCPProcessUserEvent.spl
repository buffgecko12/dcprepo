CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPProcessUserEvent (
	pUserId INTEGER,
	pEventId INTEGER,
	pContractId INTEGER
)
RETURNS VOID AS $$
DECLARE
	NewReputationPointValueAgg INTEGER;
	NumBadgesAdded INTEGER;
BEGIN   

	-- Update reputation info
	WITH ins AS (
		INSERT INTO $APP_NAME$.User_Reputation_Event (UserId, SourceEventId, ContractId, PointValue, EventTS)
		SELECT pUserId, pEventId, pContractId, le.DefaultReputationPointValue, CURRENT_TIMESTAMP
		FROM $APP_NAME$Views.Users u 
		CROSS JOIN $APP_NAME$Views.Lookup_Event le
		WHERE u.UserId = pUserId
		AND le.EventId = pEventId
		AND le.EventType = 'RP' -- Get reputation events only
		RETURNING PointValue
	)
	SELECT COALESCE(SUM(PointValue),0) FROM ins INTO NewReputationPointValueAgg
	;

	-- If reputation values change, update value and create notification
	IF(NewReputationPointValueAgg <> 0) THEN
	
		-- Update reputation value
		UPDATE $APP_NAME$.Users
		SET ReputationValue = GREATEST(ReputationValue + NewReputationPointValueAgg,0) -- Negative user reputation value not allowed
		WHERE UserId = pUserId
		;

		-- Create new notification for positive-change reputation only
		IF(NewReputationPointValueAgg > 0) THEN
		
			-- Create reputation notification
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(pUserId, 1001, pContractId); -- New reputation points
		END IF;
		
	END IF;
	
	-- Add new badges
	WITH ins AS (
		INSERT INTO $APP_NAME$.User_Badge (UserId, BadgeId, BadgeAchievedTS, BadgeProfilePictureId)
		SELECT pUserId AS UserId, badges.BadgeId, CURRENT_TIMESTAMP, bpp.ProfilePictureId
		FROM (
			SELECT 
				lb.BadgeId, 
				lb.BadgeLevel,
				ROW_NUMBER() OVER() AS MyBadgeRowNum -- Assign each earned badge a RowId
			FROM $APP_NAME$Views.Users u -- Get user info
			CROSS JOIN $APP_NAME$Views.Lookup_Event le -- Get event info
			INNER JOIN $APP_NAME$Views.Lookup_Badge lb ON le.EventId = lb.SourceEventId -- Look up badges associated with events
			WHERE u.UserId = pUserId -- Get info for user
			AND NOT EXISTS(SELECT 1 FROM $APP_NAME$Views.User_Badge ub WHERE lb.BadgeId = ub.BadgeId AND ub.UserId = u.UserId) -- Exclude badges user has already earned
			AND 
			( -- Non event-specific badges
				( -- Reputation threshold
					le.EventId = 1 AND 
					COALESCE(u.ReputationValue,0) >= lb.BadgeThresholdValue -- Check if user's reputation is greater than threshold values
				) OR
				( -- Event-specific badges (directly caused by source event)
					le.EventId = pEventId AND 
					( -- Non-threshold badges
						lb.BadgeThresholdValue IS NULL OR 
						( -- Threshold badges
							( -- Goals accepted
								le.EventId = 2002 AND (
									SELECT COUNT(*) 
									FROM $APP_NAME$Views.Contract_Party_Approval cpa
									WHERE cpa.PartyUserId = pUserId 
									AND cpa.ApprovalType = 'C' 
									AND cpa.PartyApprovalTS IS NOT NULL
								) >= lb.BadgeThresholdValue -- Check if number of accepted contract goals for user has exceeded threshold value
							) OR
							( -- Contracts sent (teacher)
								le.EventId = 2014 AND (
									SELECT COUNT(*)
									FROM $APP_NAME$Views.Contract
									WHERE TeacherUserId = pUserId
									AND ContractStatus IN('A','C','P')
								) >= lb.BadgeThresholdValue -- Check if number of contracts sent out has exceeded threshold value
							) OR
							( -- Goals completed
								le.EventId = 2 AND (
									SELECT COUNT(*)
									FROM $APP_NAME$Views.Contract_Party cp -- Get contracts associated with user
									INNER JOIN $APP_NAME$Views.Contract_Goal cg ON cp.ContractId = cg.ContractId -- Get contract goals
									WHERE cp.PartyUserId = pUserId
									AND cg.AchievedFlag IS TRUE -- Check for achieved goals
								) >= lb.BadgeThresholdValue -- Check if number of contracts sent out has exceeded threshold value
							)
						)
					)
				)
			)
		) badges
		LEFT JOIN ( -- Get all available badge profile pictures
			SELECT 
				lbp.ProfilePictureId, 
				lbp.BadgeLevel, 
				ROW_NUMBER() OVER(PARTITION BY lbp.BadgeLevel ORDER BY RANDOM()) MyProfilePictureRowNum -- Generate random ID values for each profilepicture (within badge level)
			FROM $APP_NAME$Views.Lookup_Badge_Profile_Picture lbp
			WHERE ProfilePictureId NOT IN ( -- Exclude picures user already has
				SELECT BadgeProfilePictureId 
				FROM $APP_NAME$Views.User_Badge 
				WHERE UserId = pUserId
			)
		) bpp ON badges.BadgeLevel = bpp.BadgeLevel AND badges.MyBadgeRowNum = bpp.MyProfilePictureRowNum -- Assign a random profile picture to each earned badge
		ON CONFLICT(UserId, BadgeId) DO NOTHING -- Ignore duplicates
		RETURNING 1
	) 
	SELECT COALESCE(COUNT(*),0) FROM ins INTO NumBadgesAdded
	;

	-- If badges were added, generate notification
	IF(NumBadgesAdded > 0) THEN
		PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(pUserId, 1004, pContractId); -- New badges
	END IF;
END;
$$ LANGUAGE 'plpgsql';