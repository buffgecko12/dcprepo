CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPUpdateUserInfo (
	pUserId INTEGER,
	pEventId INTEGER,
	pContractId INTEGER
)
RETURNS VOID AS $$
DECLARE
	NewReputationPointValueAgg INTEGER;
BEGIN   

	-- Update reputation info
	WITH ins AS (
		INSERT INTO $APP_NAME$.User_Reputation_Event (UserId, SourceEventId, ContractId, PointValue, EventTS)
		SELECT pUserId, pEventId, pContractId, le.DefaultReputationPointValue, CURRENT_TIMESTAMP
		FROM $APP_NAME$Views.Users u 
		CROSS JOIN $APP_NAME$Views.Lookup_Event le
		WHERE u.UserId = pUserId
		AND le.EventId = pEventId
		AND le.EventType = 'RP' -- Get reputation events only
		RETURNING PointValue
	)
	SELECT COALESCE(SUM(PointValue),0) FROM ins INTO NewReputationPointValueAgg
	;

	-- If reputation values change, update value and create notification
	IF(NewReputationPointValueAgg <> 0) THEN
	
		-- Update reputation value
		UPDATE $APP_NAME$.Users
		SET ReputationValue = GREATEST(ReputationValue + NewReputationPointValueAgg,0) -- Negative user reputation value not allowed
		WHERE UserId = pUserId
		;

		-- Create new notification for positive-change reputation only
		IF(NewReputationPointValueAgg > 0) THEN
			-- Create reputation notification
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(pUserId, )
		END IF;
		
	END IF;
	
	-- Add new badges
	INSERT INTO $APP_NAME$.User_Badge (UserId, BadgeId, BadgeAchievedTS)
	SELECT pUserId AS UserId, lb.BadgeId, CURRENT_TIMESTAMP AS BadgeAchievedTS
	FROM $APP_NAME$Views.Users u
	CROSS JOIN $APP_NAME$Views.Lookup_Event le
	INNER JOIN $APP_NAME$Views.Lookup_Badge lb ON le.EventId = lb.SourceEventId
	WHERE u.UserId = pUserId -- Get info for user
	AND (
		le.EventId = pEventId OR -- Event-specific badges
		(
			lb.SourceEventId = 1 -- Reputation threshold badges
			AND COALESCE(u.ReputationValue,0) > BadgeThresholdValue -- Check if user's reputation is greater than threshold values
		)
	)
	ON CONFLICT(UserId, BadgeId) DO NOTHING -- Ignore duplicates
	;

END;
$$ LANGUAGE 'plpgsql';