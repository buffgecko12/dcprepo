CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPUpsertUserNotification(
    pUserId INTEGER,
    pSourceEventId INTEGER, -- Alert Id to lookup
    pContractId INTEGER
) 
RETURNS VOID AS $$
BEGIN

	-- Temp table to store notifications
	CREATE TEMPORARY TABLE IF NOT EXISTS tNotifications (
		UserId INTEGER,
		NotificationText VARCHAR(500),
		SourceEventId INTEGER
	);
	
	-- Generate bulk contract party notifications
	IF(pSourceEventId IN(1002,1003)) THEN
		INSERT INTO tNotifications (UserId, NotificationText, SourceEventId)
		SELECT DISTINCT u.PartyUserId, le.EventMessage, pSourceEventId
		FROM ( --  Get user list
			SELECT cp.PartyUserId
			FROM $APP_NAME$Views.Contract_Party cp -- Get all contract parties
			WHERE ContractId = pContractId
		
			UNION ALL

			-- Include teacher for certain notifications
			SELECT c.TeacherUserId
			FROM $APP_NAME$Views.Contract c
			WHERE c.ContractId = pContractId
			AND pSourceEventId = 1002 -- "Contract approved"
		) u
		CROSS JOIN $APP_NAME$Views.Lookup_Event le -- Get event info
		WHERE le.EventId = pSourceEventId
		;
	ELSE
		INSERT INTO tNotifications (UserId, NotificationText, SourceEventId)
		SELECT pUserId, le.EventMessage, pSourceEventId
		FROM $APP_NAME$Views.Lookup_Event le
		WHERE le.EventId = pSourceEventId
		;
	END IF;

	INSERT INTO $APP_NAME$.User_Notification (UserId, NotificationText, SourceEventId)
	SELECT DISTINCT UserId, NotificationText, SourceEventId
	FROM tNotifications
	WHERE (UserId, NotificationText, SourceEventId) NOT IN (
		SELECT UserId, NotificationText, SourceEventId
		FROM $APP_NAME$Views.User_Notification
		WHERE NotificationSeen IS NULL
	)
/*	WHERE NOT EXISTS( -- Only add new notifications if there are currently no unseen notifications of the same type
		SELECT 1 
		FROM $APP_NAME$Views.User_Notification un
		WHERE un.SourceEventId = tNotifications.SourceEventId 
		AND un.UserId = tNotifications.UserId
		AND un.NotificationSeen IS NULL
	)*/
	;
	
	-- Drop temp table
	DROP TABLE tNotifications;
	
END;
$$ LANGUAGE 'plpgsql';