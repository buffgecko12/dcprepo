CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPReviseContract(
    IN pContractId INTEGER,
    IN pActionType VARCHAR(50),
    IN pRevisionDescription VARCHAR(500),
    IN pRevisionRevoteFlag BOOLEAN,
    OUT MyReturnValues JSONB
) 
AS $$
DECLARE 
	bRevisionEligibilityFlag BOOLEAN;
	MyPartyUserId INTEGER;
	
	-- Output variables to return
	MyTempContractId INTEGER;
	MyNewParties INTEGER[];
	MyDeletedParties INTEGER[];
	MyOriginalParties INTEGER[];
BEGIN
	IF(pActionType = 'revise') THEN

		-- Get new contractid
	    SELECT * FROM $APP_NAME$Views.SP_DCPGetNextId('contract') INTO MyTempContractId;
	    
	    -- Copy contract info
	    PERFORM $APP_NAME$Views.SP_DCPCopyContract(pContractId, MyTempContractId);
	    
		-- Store "temp contract id" value
		UPDATE $APP_NAME$.Contract
		SET TempContractId = MyTempContractId
		WHERE ContractId = pContractId
		;

		-- Change current contract status to 'R' - Revision
		PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId,'R');
		
	ELSEIF (pActionType = 'submit') THEN

		-- Check if contract is eligible for revision
		SELECT TempContractId,
			CASE 
			WHEN CURRENT_DATE > (CAST(RevisionDeadlineTS AS DATE) + INTERVAL '1' DAY) OR RevisionDescription IS NOT NULL THEN FALSE 
			ELSE TRUE
			END
		INTO MyTempContractId, bRevisionEligibilityFlag
		FROM $APP_NAME$Views.Contract
		WHERE ContractId = pContractId
		;
		
		IF(bRevisionEligibilityFlag) THEN 
		
			-- Replace original contract info with new contract info
			SELECT src.MyNewParties, src.MyDeletedParties, src.MyOriginalParties 
			FROM $APP_NAME$Views.SP_DCPCopyContract(MyTempContractId, pContractId) src INTO MyNewParties, MyDeletedParties, MyOriginalParties
			;
			
			-- Generate "new contract" notifications for newly added users
			IF(MyNewParties IS NOT NULL) THEN
				FOREACH MyPartyUserId IN ARRAY MyNewParties
				LOOP
					PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(MyPartyUserId, 1104, pContractId); -- New contract to review
				END LOOP;
			END IF;
	
			-- Generate "contract withdrawn" notifications for newly removed users
			IF(MyDeletedParties IS NOT NULL) THEN
				FOREACH MyPartyUserId IN ARRAY MyDeletedParties
				LOOP
					PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(MyPartyUserId, 1107, pContractId); -- You have been withdrawn
				END LOOP;
			END IF;
	
			-- Generate "revised contract" notifications for original contract users
			IF(MyOriginalParties IS NOT NULL) THEN
				FOREACH MyPartyUserId IN ARRAY MyOriginalParties
				LOOP
					PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(
						MyPartyUserId, 
						CASE WHEN pRevisionRevoteFlag THEN 1106 ELSE 1105 END, -- (1106 - re-vote required)
						pContractId
					);
				END LOOP;
			END IF;
			
			-- Change status and send notifications
			IF(pRevisionRevoteFlag) THEN
				-- Revote required: Reset status to Pending
				PERFORM $APP_NAME$Views.SP_DCPResetContractPartyVote(pContractId, NULL);
				PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'P');
			ELSE
				-- No revote required: Reset status to Active
				PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'A');
			END IF;
		ELSE
			-- Revert changes and set contract status back to active
			PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'A');
		END IF;
		
		-- Update original contract info
		UPDATE $APP_NAME$.Contract
		SET TempContractId = NULL,
			RevisionApprovalTS = CASE WHEN bRevisionEligibilityFlag THEN CURRENT_TIMESTAMP ELSE NULL END,
			RevisionDescription = CASE WHEN bRevisionEligibilityFlag THEN pRevisionDescription ELSE NULL END
		WHERE ContractId = pContractId
		;
		
		-- Delete temp contract info
		PERFORM $APP_NAME$Views.SP_DCPDeleteContract(MyTempContractId, NULL);

	ELSEIF(pActionType = 'cancel') THEN

		-- Get temp contract id
		SELECT TempContractId INTO MyTempContractId
		FROM $APP_NAME$Views.Contract
		WHERE ContractId = pContractId
		;
	
		-- Update original contract info
		UPDATE $APP_NAME$.Contract
		SET TempContractId = NULL
		WHERE ContractId = pContractId
		;
		
		-- Delete temp contract info
		PERFORM $APP_NAME$Views.SP_DCPDeleteContract(MyTempContractId, NULL);
	
		-- Reset original contract to Active 
		PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'A');
	END IF;
	
	-- Build output JSON
	MyReturnValues = JSON_BUILD_OBJECT(
		'tempcontractid', MyTempContractId,
		'newparties', MyNewParties,
		'deletedparties', MyDeletedParties,
		'originalparties', MyOriginalParties
	);
END
$$ LANGUAGE 'plpgsql';
