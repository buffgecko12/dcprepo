CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPApproveContract(
    pContractId INTEGER,
    pPartyUserId INTEGER,
    pApprovalType CHAR(1),
    pPreferredGoalId INTEGER,
    pSignatureScanFile BYTEA,
    pLogonUserId INTEGER,
    pGuardianApprovalInfo JSONB
) 
RETURNS BOOLEAN AS $$
DECLARE
	bContractApprovedFlag BOOLEAN;
	bRevisionApprovedFlag BOOLEAN;
	bContractNewlyApprovedFlag BOOLEAN;	
	bPartyApprovalFlag BOOLEAN;
BEGIN

	bPartyApprovalFlag = FALSE;
	bContractNewlyApprovedFlag = FALSE;
	
	-- Get approval info for contract
	SELECT 
		CASE WHEN ContractApprovalTS IS NOT NULL THEN TRUE ELSE FALSE END,
		CASE WHEN RevisionApprovalTS IS NOT NULL THEN TRUE ELSE FALSE END
		INTO bContractApprovedFlag, bRevisionApprovedFlag
	FROM $APP_NAME$Views.Contract
	WHERE ContractId = pContractId
	FOR UPDATE -- Lock table row so it's not read until after function completes
	;
	
	-- Update approval	
	WITH ins AS (
		INSERT INTO $APP_NAME$.Contract_Party_Approval(ContractId, PartyUserId, ApprovalType, PreferredGoalId, SignatureScanFile, PartyApprovalTS, LogonUserId, GuardianApprovalInfo)
		SELECT pContractId, pPartyUserId, pApprovalType, pPreferredGoalId, NULLIF(pSignatureScanFile,''), CURRENT_TIMESTAMP, pLogonUserId, pGuardianApprovalInfo
		FROM $APP_NAME$Views.Contract_Party -- Make sure party user exists
		WHERE ContractId = pContractId
		AND PartyUserId = pPartyUserId
		ON CONFLICT (ContractId, PartyUserId, ApprovalType) DO UPDATE SET 
			PreferredGoalId = COALESCE(EXCLUDED.PreferredGoalId, Contract_Party_Approval.PreferredGoalId),
			SignatureScanFile = COALESCE(EXCLUDED.SignatureScanFile, Contract_Party_Approval.SignatureScanFile),
			PartyApprovalTS = CURRENT_TIMESTAMP,
			LogonUserId = pLogonUserId,
			GuardianApprovalInfo = pGuardianApprovalInfo
		RETURNING 1
	)
	SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END INTO bPartyApprovalFlag FROM ins 
	;

	-- Generate user event (party approval)
	IF(bPartyApprovalFlag) THEN
		PERFORM $APP_NAME$Views.SP_DCPProcessUserEvent(pPartyUserId, 2002, pContractId); -- Accept contract goal
	END IF;
	
	-- TO-DO: Possibly remove this (only teacher approval required for revision; done elsewhere)
	-- Mark revision as approved if it has been approved by all required parties (skip if already approved)
	IF (NOT bRevisionApprovedFlag) THEN
		UPDATE $APP_NAME$.Contract
		SET RevisionApprovalTS = CURRENT_TIMESTAMP
		WHERE ContractId = pContractId
		AND EXISTS (
			SELECT 1
			FROM (
				SELECT 
					SUM(CASE WHEN cp.ContractRole IN ('PL','BL') AND cpa.PartyApprovalTS IS NOT NULL THEN 1 ELSE 0 END) AS NumLeadersApproved,
					SUM(CASE WHEN cp.ContractRole IN ('MR') AND cpa.PartyApprovalTS IS NOT NULL THEN 1 ELSE 0 END) AS NumMentorsApproved,
					SUM(CASE WHEN cp.ContractRole IN ('MR') THEN 1 ELSE 0 END) NumMentors
				FROM $APP_NAME$Views.Contract c
				INNER JOIN $APP_NAME$Views.Contract_Party cp ON c.ContractId = cp.ContractId AND cp.ContractRole IN ('MR','PL','BL') -- Get mentor and primary/secondary group leaders
				LEFT JOIN $APP_NAME$Views.Contract_Party_Approval cpa ON cp.ContractId = cpa.ContractId AND cp.PartyUserId = cpa.PartyUserId AND cpa.ApprovalType = 'R' -- Check for "Revision" approvals
				WHERE c.ContractId = pContractId
			) src
			WHERE src.NumMentors = NumMentorsApproved -- Make sure all mentors approved
			AND src.NumLeadersApproved > 0 -- Make sure at least one of the student leaders approved
		)
		;
	END IF;

	-- Extra processing for "pending" contracts (i.e. not fully approved)
	IF (NOT bContractApprovedFlag) THEN
	
		-- Mark contract as approved if it has been approved by all required parties
		UPDATE $APP_NAME$.Contract
		SET ContractApprovalTS = CURRENT_TIMESTAMP
		WHERE ContractId = pContractId
		AND EXISTS (
			SELECT 1
			FROM (
				SELECT
					COUNT(*) AS NumParties,
					SUM(
						CASE 
							WHEN cpa.PartyApprovalTS IS NOT NULL THEN -- Party has already approved
								CASE 
									WHEN NOT c.GuardianApprovalFlag OR c.GuardianApprovalFlag IS NULL THEN 1 -- Guardian approval flag IS NOT required (or not defined)
									WHEN cpg.PartyApprovalTS IS NOT NULL THEN 1 -- Guardian approval flag IS required and guardian has already approved
									ELSE 0 -- NOT APPROVED
								END
							ELSE 0 -- Party has not approved yet
						END	
					) AS NumPartiesApproved
				FROM $APP_NAME$Views.Contract c
				INNER JOIN $APP_NAME$Views.Contract_Party cp ON c.ContractId = cp.ContractId -- Get all contract parties (participants, mentor)
				LEFT JOIN $APP_NAME$Views.Contract_Party_Approval cpa ON cp.ContractId = cpa.ContractId AND cp.PartyUserId = cpa.PartyUserId AND cpa.ApprovalType = 'C' -- Get contract party approval info (Contract)
				LEFT JOIN $APP_NAME$Views.Contract_Party_Approval cpg ON cp.ContractId = cpg.ContractId AND cp.PartyUserId = cpg.PartyUserId AND cp.ContractRole <> 'MR' AND cpg.ApprovalType = 'G' -- Get non-mentor participants guardian approval info
				WHERE c.ContractId = pContractId
			) src
			WHERE NumParties = NumPartiesApproved -- Only return if all parties have approved
		) 
		;
		
		-- If contract has now been approved by all parties, specify the preferred goal and set the contract to Active
		IF(SELECT 1 FROM $APP_NAME$.Contract WHERE ContractId = pContractId AND ContractApprovalTS IS NOT NULL) THEN
		
			-- Determine and accept preferred goal
			UPDATE $APP_NAME$.Contract_Goal cg
			SET AcceptedFlag = TRUE
			FROM (
				SELECT src.ContractId, src.PreferredGoalId
				FROM (
					SELECT
						src.ContractId,
						src.PreferredGoalId, 
						ROW_NUMBER() OVER(
							PARTITION BY src.ContractId 
							ORDER BY GoalVoteCount DESC, CASE DifficultyLevel WHEN 'E' THEN 3 WHEN 'M' THEN 2 WHEN 'D' THEN 1 ELSE 0 END DESC -- Select easiest goal in case of tie
						) AS GoalRank
					FROM (
						SELECT c.ContractId, cpa.PreferredGoalId, cg.DifficultyLevel, COUNT(*) AS GoalVoteCount
						FROM $APP_NAME$.Contract c
						INNER JOIN $APP_NAME$Views.Contract_Goal cg ON c.ContractId = cg.ContractId -- Get goal info
						INNER JOIN $APP_NAME$Views.Contract_Party cp ON c.ContractId = cp.ContractId -- Get parties
						INNER JOIN $APP_NAME$Views.Contract_Party_Approval cpa ON cp.ContractId = cpa.ContractId AND cp.PartyUserId = cpa.PartyUserId AND cpa.PreferredGoalId = cg.GoalId-- Get party preferences
						WHERE c.ContractId = pContractId
						AND c.ContractStatus = 'P' -- Only check for pending contracts
						GROUP BY c.ContractId, cpa.PreferredGoalId, cg.DifficultyLevel
					)
					src
				) src
				WHERE src.GoalRank = 1
			) src
			WHERE cg.ContractId = src.ContractId
			AND cg.GoalId = src.PreferredGoalId
			;		
			
			-- Set status to active
			PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(pContractId, 'A');
			
			-- Generate user notifications
			PERFORM $APP_NAME$Views.SP_DCPUpsertUserNotification(NULL, 1101, pContractId); -- Contract active
			
			bContractNewlyApprovedFlag = TRUE; -- This should only return one time, when contract has been approved
		END IF;
	END IF;
	
	RETURN bContractNewlyApprovedFlag;
END
$$ LANGUAGE 'plpgsql';