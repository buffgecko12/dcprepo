/*

CHECK USER - OBJECT PERMISSIONS
1. Get all roles associated with object
2. Determine which roles given user is associated with
3. Return most permissive access level to object

USE CASES
1. Check if user has access to view contracts
2. Check if user has access to download a file

0 - No access
1 - Browse / List
4 - Read /download
8 - Edit / Write
10 - Create
12 - Delete

*/

CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPCheckUserObjectAccess(
    pUserId INTEGER,
    pObjectId INTEGER,
    pObjectClass CHAR(2),
    pRequestedAccessLevel INTEGER
)
RETURNS TABLE (
	UserId INTEGER, -- Need to return PK field for Django user object
	HasAccess BOOLEAN
) AS $$
DECLARE
	MyAccessLevel SMALLINT;
	AccessFlag BOOLEAN DEFAULT FALSE;
BEGIN

	-- Implicit Permissions (check first)
	IF(pObjectClass = 'FL') THEN 
	
		-- Contract files
	    SELECT 4 INTO MyAccessLevel -- Default read access (i.e. download)
	    WHERE EXISTS (
	        SELECT 1
	        FROM $APP_NAME$Views.File f
	        INNER JOIN $APP_NAME$Views.Contract_Party cp ON f.ContractId = cp.ContractId -- Get contract parties (i.e. teachers associated with file)
	        WHERE cp.TeacherUserId = pUserId -- Get contracts related to specified user
	        AND f.FileId = pObjectId
	    )
	    ;
	END IF;
	    
	-- Explicit Permissions (continue only if no implicit permissions)
	IF(MyAccessLevel IS NULL OR MyAccessLevel < pRequestedAccessLevel) THEN

		-- Return access level for a given user / object
		SELECT 
			CASE 
				WHEN MIN(ra.AccessLevel) <> 0 THEN MAX(ra.AccessLevel) -- Return most permissible access only if it has not been revoked
				ELSE 0 -- No access
			END INTO MyAccessLevel
		FROM (
			-- Files
			SELECT CAST(FileId AS INTEGER) AS ObjectId, CAST('FL' AS CHAR(2)) AS ObjectClass 
			FROM $APP_NAME$Views.File
			WHERE pObjectClass = 'FL'
			AND FileId = pObjectId
			
			UNION ALL
	
			-- Objects (don't re-use other object classes, i.e. 'FL')
			SELECT ObjectId, ObjectClass 
			FROM $APP_NAME$Views.Object
			WHERE ObjectClass = pObjectClass
			AND ObjectId = pObjectId
		) o -- Objects
		INNER JOIN $APP_NAME$Views.Role_ACL ra ON o.ObjectId = ra.ObjectId AND o.ObjectClass = ra.ObjectClass -- Roles associated with objects
		INNER JOIN $APP_NAME$Views.Role r ON ra.RoleId = r.RoleId -- Role info
		INNER JOIN $APP_NAME$Views.Users u ON u.UserId = pUserId -- User info
		WHERE r.PublicFlag IS TRUE -- Public
		OR u.UserId = ANY(r.UserList) -- Specific user
		OR ( -- Check School and UserType together (in case they are both are specified)
		    (u.SchoolId = ANY(r.SchoolList) OR r.SchoolList IS NULL) AND -- School
		    (u.UserType = ANY(r.UserTypeList) OR r.UserTypeList IS NULL ) -- UserType
		)
		;
	
	END IF;

	-- Check if user has requested access
	AccessFlag = CASE WHEN COALESCE(MyAccessLevel,0) >= pRequestedAccessLevel THEN TRUE ELSE FALSE END;

	RETURN QUERY
	SELECT puserId, AccessFlag
	;	
END;
$$ LANGUAGE 'plpgsql';