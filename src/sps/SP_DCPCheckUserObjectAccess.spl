/*

CHECK USER - OBJECT PERMISSIONS
1. Get all roles associated with object
2. Determine which roles given user is associated with
3. Return most permissive access level to object

USE CASES
1. Check if user has access to view contracts
2. Check if user has access to download a file

 0 - No access
 1 - Browse / List
 4 - Read /download
 8 - Edit / Write / Execute
10 - Create
12 - Delete

*/

CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPCheckUserObjectAccess(
    pUserId INTEGER,
    pObjectId INTEGER,
    pObjectClass CHAR(2),
    pRequestedAccessLevel INTEGER,
    pBusinessObjectPermissionsFlag BOOLEAN DEFAULT FALSE
)
RETURNS TABLE (
	UserId INTEGER, -- Need to return PK field for Django user object
	ObjectId INTEGER,
	ObjectClass CHAR(2),
	ObjectName VARCHAR(100),
	AccessLevel INTEGER
) AS $$
BEGIN

	RETURN QUERY
	SELECT pUserId, src.ObjectId, src.ObjectClass, src.ObjectName, MyAccessLevel
	FROM (
		-- Get highest access level per object
		SELECT src.ObjectId, src.ObjectClass, CAST(MAX(src.ObjectName) AS VARCHAR(100)) AS ObjectName, 
			CASE 
				WHEN MIN(src.AccessLevel) <> 0 THEN MAX(src.AccessLevel) -- Return most permissible access only if it has not been revoked
				ELSE 0 -- No access
			END AS MyAccessLevel
		FROM (
			-- Explicit permissions
			SELECT CAST(o.ObjectId AS INTEGER) AS ObjectId, CAST(o.ObjectClass AS CHAR(2)) AS ObjectClass, o.ObjectName, 
			CASE WHEN acl.Accesslevel = 0 THEN acl.AccessLevel ELSE -- Give revoked permission precedence
	            GREATEST(
		            MAX(CASE WHEN o.ObjectClass = 'BO' AND o.ObjectName = CASE WHEN pObjectClass = 'FL' THEN 'file' END AND pBusinessObjectPermissionsFlag IS TRUE THEN acl.AccessLevel END) OVER(), -- Business object access
		            acl.AccessLevel -- specific object access
	            ) 
            END AS AccessLevel
			FROM (
				-- Objects (don't re-use other object classes, i.e. 'FL')
				SELECT o.ObjectId, o.ObjectClass, o.ObjectName
				FROM $APP_NAME$Views.Object o
				WHERE (
					o.ObjectClass = pObjectClass AND
					(o.ObjectId = pObjectId OR pObjectId IS NULL)
				)
				OR (o.ObjectClass = 'BO' AND o.ObjectName = CASE WHEN pObjectClass = 'FL' THEN 'file' END AND pBusinessObjectPermissionsFlag IS TRUE) -- Include business-object permissions

				UNION ALL

				-- Files
				SELECT CAST(f.FileId AS INTEGER) AS ObjectId, pObjectClass AS ObjectClass, NULL
				FROM $APP_NAME$Views.File f
				WHERE pObjectClass = 'FL'
				AND (f.FileId = pObjectId OR pObjectId IS NULL)
			) o -- Objects
			LEFT JOIN (
				SELECT ra.ObjectId, ra.ObjectClass, ra.AccessLevel, r.PublicFlag, r.UserList, r.SchoolList, r.UserTypeList, u.UserId, u.SchoolId, u.UserType
				FROM $APP_NAME$Views.Role_ACL ra
				INNER JOIN $APP_NAME$Views.Role r ON ra.RoleId = r.RoleId -- Role info
				INNER JOIN $APP_NAME$Views.Users u ON u.UserId = pUserId -- User info
			) acl ON o.ObjectId = acl.ObjectId AND o.ObjectClass = acl.ObjectClass -- ACLs associated with objects
			WHERE acl.PublicFlag IS TRUE -- Public
			OR acl.UserId = ANY(acl.UserList) -- Specific user
			OR ( -- Check School and UserType together (in case they are both are specified)
			    (acl.SchoolId = ANY(acl.SchoolList) OR acl.SchoolList IS NULL) AND -- School
			    (acl.UserType = ANY(acl.UserTypeList) OR acl.UserTypeList IS NULL ) -- UserType
			)
			OR pUserId IS NULL -- Ignore ACLs
			OR pBusinessObjectPermissionsFlag IS TRUE -- Allow business-object level override
			
			UNION ALL
			
			-- Implicit permissions (i.e. user-related contracts)
			SELECT f.FileId AS ObjectId, pObjectClass AS ObjectClass, NULL, 4 AS AccessLevel
			FROM $APP_NAME$Views.File f
			INNER JOIN $APP_NAME$Views.Contract_Party cp ON f.ContractId = cp.ContractId -- Get users related to contract file
			WHERE (cp.TeacherUserId = pUserId OR pUserId IS NULL)
			AND (f.FileId = pObjectId OR pObjectId IS NULL)
			AND pObjectClass = 'FL'
		) src
		WHERE src.ObjectClass = pObjectClass -- Filter out any non-requested object classes used in calculation
		GROUP BY src.ObjectId, src.ObjectClass
	) src
	WHERE (MyAccessLevel >= pRequestedAccessLevel OR pRequestedAccessLevel IS NULL)
	;
END;
$$ LANGUAGE 'plpgsql';