CREATE OR REPLACE FUNCTION $DB_NAME$Views.SP_DCPUpsertTeacher (
    pTeacherUserId INTEGER, 
    pSchoolId INTEGER,
    pClassInfo JSONB,
    pFirstName VARCHAR(100), 
    pLastName VARCHAR(100), 
    pDefaultSignatureScanFile BYTEA,
    pPhoneNumber VARCHAR(25),
    pEmailAddress VARCHAR(250)
) 
RETURNS VOID AS $$
BEGIN

	-- S0: Update user info
	UPDATE $DB_NAME$.Users
	SET FirstName = COALESCE(pFirstName, Users.FirstName), -- Don't overwrite existing values with NULL
		LastName = COALESCE(pLastName, Users.LastName),
		DefaultSignatureScanFile = COALESCE(pDefaultSignatureScanFile, Users.DefaultSignatureScanFile),
		PhoneNumber = COALESCE(pPhoneNumber, Users.PhoneNumber),
		EmailAddress = COALESCE(pEmailAddress, Users.EmailAddress)
	WHERE UserId = pTeacherUserId
	;
	
    -- S1: Update teacher info
    INSERT INTO $DB_NAME$.User_Teacher(TeacherUserId, SchoolId)
    VALUES(pTeacherUserId, pSchoolId)
    ON CONFLICT(TeacherUserId) DO UPDATE SET
    	SchoolId = EXCLUDED.SchoolId
    ;
    
    -- S2: Update class info
    IF(pClassInfo IS NOT NULL) THEN

    	-- S2a: Delete classes
		DELETE FROM $DB_NAME$.User_Teacher_Class
		WHERE TeacherUserId = pTeacherUserId
		AND ClassId IN (
			SELECT CAST (
				JSONB_ARRAY_ELEMENTS_TEXT(pClassInfo->'deletedclasses') AS INTEGER
			)
		)
		;    
    
    	-- S2b: Update classes
		INSERT INTO $DB_NAME$.User_Teacher_Class (TeacherUserId, ClassId)
		SELECT pTeacherUserId, src.classid
		FROM JSONB_TO_RECORDSET(pClassInfo->'currentclasses')
		AS src (classid INTEGER)
		ON CONFLICT (TeacherUserId, ClassId) DO NOTHING -- TO-DO: Update this when more fields are added
		;
    END IF;
    
END;
$$ LANGUAGE 'plpgsql';