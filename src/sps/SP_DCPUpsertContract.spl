CREATE OR REPLACE FUNCTION $DB_NAME$Views.SP_DCPUpsertContract(
    pContractId INTEGER,
    pClassId INTEGER,
    pContractType CHAR(1),
    pTeacherUserId INTEGER,
    pContractValidPeriod TSTZRANGE,
    pGuardianApprovalFlag BOOLEAN,
    pRevisionDeadlineTS TIMESTAMP WITH TIME ZONE,
    pRevisionDescription VARCHAR(500),
    pStudentLeaderRequirements VARCHAR(500),
    pTeacherRequirements VARCHAR(500),
    pStudentRequirements VARCHAR(500),
    pContractScanFile BYTEA,
    pGoalInfo JSONB,
    pRewardInfo JSONB,
    pPartyUserInfo JSONB
) 
RETURNS INTEGER AS $$
DECLARE
	MyContractId INTEGER;
BEGIN
	
	-- Determine contractid
	IF(pContractId IS NULL) THEN
		-- Create contract (get new id)
	    SELECT * FROM $DB_NAME$Views.SP_DCPGetNextId('contract') INTO MyContractId;
    ELSE
    	-- Update contract (use provided id)
    	MyContractId = pContractId;
    END IF;

	-- Upsert general info
	INSERT INTO $DB_NAME$.Contract (ContractId, ClassId, ContractType, TeacherUserId, ContractValidPeriod, GuardianApprovalFlag, 
	  RevisionDeadlineTS, RevisionDescription, StudentLeaderRequirements, TeacherRequirements, StudentRequirements, ContractScanFile)
    VALUES(MyContractId, pClassId, pContractType, pTeacherUserId, pContractValidPeriod, pGuardianApprovalFlag, pRevisionDeadlineTS, 
      pRevisionDescription, pStudentLeaderRequirements, pTeacherRequirements, pStudentRequirements, pContractScanFile)
    ON CONFLICT (ContractId) DO UPDATE SET
        ClassId = EXCLUDED.ClassId,
        ContractType = EXCLUDED.ContractType,
        TeacherUserId = EXCLUDED.TeacherUserId,
	    ContractValidPeriod = EXCLUDED.ContractValidPeriod,
	    GuardianApprovalFlag = EXCLUDED.GuardianApprovalFlag,
	    RevisionDeadlineTS = EXCLUDED.RevisionDeadlineTS,
		RevisionDescription = EXCLUDED.RevisionDescription,
	    StudentLeaderRequirements = EXCLUDED.StudentLeaderRequirements,
	    TeacherRequirements = EXCLUDED.TeacherRequirements,
	    StudentRequirements = EXCLUDED.StudentRequirements,
	    ContractScanFile = EXCLUDED.ContractScanFile
    ;

    -- Update goals info
    PERFORM $DB_NAME$Views.SP_DCPModifyContractGoals(MyContractId, pGoalInfo);
    
    -- Update rewards info
    PERFORM $DB_NAME$Views.SP_DCPModifyContractRewards(MyContractId, pRewardInfo);
    
	-- Update parties info	
    PERFORM $DB_NAME$Views.SP_DCPModifyContractParties(MyContractId, pPartyUserInfo);

    -- Return contractId
    RETURN MyContractId;
END
$$ LANGUAGE 'plpgsql';
