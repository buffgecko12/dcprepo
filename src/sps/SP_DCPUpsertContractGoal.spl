CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPUpsertContractGoal(
    pContractId INTEGER,
    pGoalId INTEGER,
    pDifficultyLevel CHAR(1),
    pGoalDescription VARCHAR(500),
    pAcceptedFlag BOOLEAN,
    pRewardInfo JSONB,
    pMaxNumRewards INTEGER
)
RETURNS INTEGER AS $$
DECLARE
	MyGoalId INTEGER;
	myreward RECORD;
BEGIN

	-- Determine goalId
	IF(pGoalId IS NULL) THEN
		SELECT COALESCE(MAX(GoalId),0) + 1 INTO MyGoalId
		FROM $APP_NAME$.Contract_Goal
		WHERE ContractId = pContractId
		;
	ELSE
		MyGoalId = pGoalId;
	END IF;

	-- Upsert goal
    INSERT INTO $APP_NAME$.Contract_Goal (ContractId, GoalId, DifficultyLevel, GoalDescription, AcceptedFlag, MaxNumRewards)
	VALUES (pContractId, MyGoalId, pDifficultyLevel, pGoalDescription, pAcceptedFlag, pMaxNumRewards)
    ON CONFLICT (ContractId, GoalId) DO UPDATE SET 
		DifficultyLevel = EXCLUDED.DifficultyLevel,
        GoalDescription = EXCLUDED.GoalDescription,
        AcceptedFlag = EXCLUDED.AcceptedFlag,
        MaxNumRewards = EXCLUDED.MaxNumRewards
    ;

    -- Delete any rewards (Shortcut: delete any existing rows and then re-populate with form data)
	DELETE FROM $APP_NAME$.Contract_Goal_Reward
    WHERE ContractId = pContractId
    AND GoalId = pGoalId
    ;
/*    
    IF(pRewardInfo->'deletedrewards') IS NOT NULL THEN
        DELETE FROM $APP_NAME$.Contract_Goal_Reward
        WHERE ContractId = pContractId
        AND GoalId = pGoalId
        AND RewardId IN (
            SELECT CAST(
                JSONB_ARRAY_ELEMENTS_TEXT(pRewardInfo->'deletedrewards') AS INTEGER
            )
        )
        ;
    END IF;
*/
	-- Update rewards info
    IF(pRewardInfo->'currentrewards') IS NOT NULL THEN 
		FOR myreward IN 
			SELECT src.RewardId
			FROM JSONB_TO_RECORDSET(pRewardInfo->'currentrewards')
			  AS src(
			   rewardId INTEGER
		   )
		LOOP
		    PERFORM $APP_NAME$Views.SP_DCPUpsertContractGoalReward(pContractId, MyGoalId, myreward.RewardId);
		END LOOP;
	END IF;
		
    -- Return GoalId
    RETURN MyGoalId;
END
$$ LANGUAGE 'plpgsql';
