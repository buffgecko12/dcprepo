CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPGetContract(
    pContractId INTEGER,
    pTeacherUserId INTEGER,
    pSchoolYear INTEGER
)
RETURNS TABLE (
  ContractId INTEGER, SchoolYear SMALLINT, ContractName VARCHAR(100), Round SMALLINT, ContractValidPeriod TSTZRANGE, ProposalTS TIMESTAMP WITH TIME ZONE, 
  EvaluationTS TIMESTAMP WITH TIME ZONE, EvidenceTS TIMESTAMP WITH TIME ZONE, ContractStatus CHAR(1), Notes VARCHAR(500), PartyInfo JSONB, ContractValue INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
    	c.ContractId, c.SchoolYear, c.ContractName, c.Round, c.ContractValidPeriod, c.ProposalTS, c.EvaluationTS, c.EvidenceTS, c.ContractStatus, c.Notes,
    	cp.PartyInfo, COALESCE(cv.ContractValue,0) AS ContractValue
    FROM $APP_NAME$Views.Contract c
    INNER JOIN (
    	SELECT 
    		cp.ContractId, 
    		JSONB_AGG(
    			(
    				SELECT x FROM (SELECT cp.TeacherUserId, cp.ClassId, cp.NumParticipants, cp.NumWinners, cp.ContractPartyRewardInfo, u.EmailAddress AS TeacherEmailAddress) AS x
    			)
    			ORDER BY cp.TeacherUserId, cp.ClassId -- Order rows in party array
    		) AS PartyInfo
    	FROM (
    		SELECT cp.ContractId, cp.TeacherUserId, cp.ClassId, MAX(cp.NumParticipants) AS NumParticipants, MAX(cp.NumWinners) AS NumWinners,
    			JSONB_AGG(
    				(
    					SELECT x FROM (SELECT cpr.RewardId, cpr.Quantity, cpr.ActualRewardValue, cpr.Status, lr.RewardDisplayName) AS x
    				)
    				ORDER BY lr.Vendor, lr.RewardDisplayName
    			) AS ContractPartyRewardInfo
    		FROM $APP_NAME$Views.Contract_Party cp
    		LEFT JOIN $APP_NAME$Views.Contract_Party_Reward cpr ON cp.ContractId = cpr.ContractId AND cp.TeacherUserId = cpr.TeacherUserId AND cp.ClassId = cpr.ClassId
    		LEFT JOIN $APP_NAME$Views.Reward lr ON cpr.RewardId = lr.RewardId
		    WHERE (cp.TeacherUserId = pTeacherUserId OR pTeacherUserId IS NULL)
			GROUP BY cp.ContractId, cp.TeacherUserId, cp.ClassId
		) cp -- Get contract party / reward info
		LEFT JOIN $APP_NAME$Views.Users u ON cp.TeacherUserId = u.UserId -- Get user info (left join in case users is removed)
	    GROUP BY cp.ContractId
    ) cp ON c.ContractId = cp.ContractId
	LEFT JOIN (
		SELECT src.ContractId, src.ContractValue 
		FROM $APP_NAME$Views.SP_DCPGetContractValue(NULL, pContractId, NULL) AS src
	) cv ON c.ContractId = cv.ContractId -- Get contract value
    WHERE (c.ContractId = pContractId OR pContractId IS NULL)
    AND (c.SchoolYear = pSchoolYear OR pSchoolYear IS NULL)
    ORDER BY LOWER(c.ContractValidPeriod)
    ;
END;
$$ LANGUAGE 'plpgsql';