CREATE OR REPLACE FUNCTION $DB_NAME$Views.SP_DCPGetContract(
    pContractId INTEGER,
    pPartyUserId INTEGER,
    pTeacherUserId INTEGER,
    pExcludeDraftsFlag BOOLEAN
)
RETURNS TABLE (
	ContractId INTEGER, ClassId INTEGER, ClassDisplayName VARCHAR(100), ContractType CHAR(1), TeacherUserId INTEGER, TeacherFirstName VARCHAR(100), TeacherLastName VARCHAR(100),
	ContractValidPeriod TSTZRANGE, GuardianApprovalFlag BOOLEAN, RevisionDeadlineTS TIMESTAMP WITH TIME ZONE, RevisionDescription VARCHAR(500), RevisionApprovalTS TIMESTAMP WITH TIME ZONE, 
	StudentLeaderRequirements VARCHAR(500), TeacherRequirements VARCHAR(500), StudentRequirements VARCHAR(500), ContractScanFile BYTEA, 
	ContractApprovalTS TIMESTAMP WITH TIME ZONE, ContractStatus CHAR(1), GoalInfo JSONB, PartyUserInfo JSONB
)AS $$
BEGIN
    RETURN QUERY
    SELECT 
    	c.ContractId, c.ClassId, cl.ClassDisplayName, c.ContractType, c.TeacherUserId, t.firstname AS TeacherFirstName, t.lastname AS TeacherLastName, c.ContractValidPeriod, c.GuardianApprovalFlag, c.RevisionDeadlineTS, c.RevisionDescription,
		c.RevisionApprovalTS, c.StudentLeaderRequirements, c.TeacherRequirements, c.StudentRequirements, c.ContractScanFile, c.ContractApprovalTS, c.ContractStatus,
		cg.GoalInfo, cp.PartyUserInfo
    FROM $DB_NAME$Views.Contract c
    LEFT JOIN $DB_NAME$Views.Class cl ON c.ClassId = cl.ClassId
    LEFT JOIN $DB_NAME$Views.Teachers t ON c.TeacherUserId = t.TeacherUserId
    LEFT JOIN (
		SELECT 
			cp.ContractId, 
			JSONB_BUILD_OBJECT(
				'currentparties',
				JSONB_AGG(
					(SELECT x FROM (SELECT cp.PartyUserId, cp.ContractRole, cpa.ApprovalTS, cpa.PreferredGoalId, u.Firstname, u.Lastname, u.EmailAddress) AS x)
					ORDER BY cp.ContractRole, u.Firstname, u.LastName
				)
			) AS PartyUserInfo
		FROM $DB_NAME$Views.Contract_Party cp
		LEFT JOIN $DB_NAME$Views.Contract_Party_Approval cpa ON cp.ContractId = cpa.ContractId AND cp.PartyUserId = cpa.PartyUserId AND cpa.ApprovalType = 'C' -- Get contract party approval info
		INNER JOIN $DB_NAME$Views.Users u ON cp.PartyUserId = u.UserId
		GROUP BY cp.ContractId
    ) cp ON c.ContractId = cp.ContractId -- Get party info
    LEFT JOIN (
		SELECT 
			cg.ContractId, 
			JSONB_BUILD_OBJECT(
				'currentgoals',
				JSONB_AGG(
					(SELECT x FROM (SELECT cg.GoalId, cg.DifficultyLevel, cg.GoalDescription, cg.AcceptedFlag, cg.AchievedFlag, cgr.rewardinfo) AS x)
					ORDER BY cg.ContractId, CASE cg.DifficultyLevel WHEN 'E' THEN 3 WHEN 'M' THEN 2 WHEN 'D' THEN 1 ELSE 0 END DESC, cg.GoalId
				)
			) AS goalinfo
		FROM Contract_Goal cg
		LEFT JOIN (
			SELECT 
				cgr.ContractId, 
				cgr.GoalId, 
				JSONB_BUILD_OBJECT(
					'currentrewards',
					JSONB_AGG(
						(SELECT x FROM (SELECT cgr.RewardId, r.RewardDisplayName, r.RewardDescription, r.RewardValue) AS x)
						ORDER BY cgr.ContractId, cgr.GoalId, r.RewardDisplayName
					)
				) AS RewardInfo
			FROM $DB_NAME$Views.Contract_Goal_Reward cgr
			INNER JOIN $DB_NAME$Views.Lookup_Reward r ON cgr.RewardId = r.RewardId
			GROUP BY cgr.ContractId, cgr.GoalId
		) cgr ON cg.ContractId = cgr.ContractId AND cg.GoalId = cgr.GoalId
		GROUP BY cg.ContractId
    ) cg ON c.ContractId = cg.ContractId -- Get goal/reward info
    WHERE (c.ContractId = pContractId OR pContractId IS NULL)
	AND (c.TeacherUserId = pTeacherUserId OR pTeacherUserId IS NULL)
    AND (
    	c.ContractId IN (
    		SELECT cp.ContractId 
    		FROM $DB_NAME$Views.Contract_Party cp
    		WHERE cp.PartyUserId = pPartyUserId
		) OR pPartyUserId IS NULL
	) -- Return contracts for a specific user
	AND (c.ContractStatus <> 'D' OR pExcludeDraftsFlag IS NULL OR NOT pExcludeDraftsFlag) -- Exclude draft contracts unless specified otherwise
	ORDER BY c.ContractId
	;
END;
$$ LANGUAGE 'plpgsql';