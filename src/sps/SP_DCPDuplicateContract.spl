CREATE OR REPLACE FUNCTION $APP_NAME$Views.SP_DCPDuplicateContract(
    pContractId INTEGER,
    pClassId INTEGER,
    pTeacherUserId INTEGER,
    pPartyUserInfo JSONB
) 

RETURNS INTEGER AS $$
DECLARE
	MyContractId INTEGER; -- New contractid
	-- Get source contract values
    SourceContractName VARCHAR(100);
    SourceContractType CHAR(1);
    SourceContractValidPeriod TSTZRANGE;
    SourceGuardianApprovalFlag BOOLEAN;
    SourceRevisionDeadlineTS TIMESTAMP WITH TIME ZONE;
    SourceStudentLeaderRequirements VARCHAR(500);
    SourceTeacherRequirements VARCHAR(500);
    SourceStudentRequirements VARCHAR(500);
    SourceGoalInfo JSONB;
BEGIN

	-- Update rewardInfo (SP_DCPUpsertGoalReward) upsert to INNER JOIN to Lookup_Reward table to make sure only inserting valid rewards
	-- Check dates are still acceptable

	-- Get contract info
	SELECT ContractName, ContractType, ContractValidPeriod, GuardianApprovalFlag, RevisionDeadlineTS, StudentLeaderRequirements, TeacherRequirements, StudentRequirements, GoalInfo
	INTO SourceContractName, SourceContractType, SourceContractValidPeriod, SourceGuardianApprovalFlag, SourceRevisionDeadlineTS, SourceStudentLeaderRequirements, SourceTeacherRequirements, SourceStudentRequirements, SourceGoalInfo
	FROM $APP_NAME$Views.SP_DCPGetContract(pContractId, NULL, NULL, NULL, NULL)
	;

	-- Upsert contract info
	SELECT * INTO MyContractId 
	FROM $APP_NAME$Views.SP_DCPUpsertContract(
		NULL, SourceContractName, pClassId, SourceContractType, pTeacherUserId, SourceContractValidPeriod, SourceGuardianApprovalFlag, SourceRevisionDeadlineTS, SourceStudentLeaderRequirements, SourceTeacherRequirements, SourceStudentRequirements, NULL, SourceGoalInfo, pPartyUserInfo
	);
	
	-- Reset goal info
	UPDATE $APP_NAME$.Contract_Goal
	SET AcceptedFlag = NULL
	WHERE ContractId = MyContractId
	;
	
	-- Change status to 'draft'
	PERFORM $APP_NAME$Views.SP_DCPChangeContractStatus(MyContractId, 'D');
	
    -- Return contractId
    RETURN MyContractId;
END
$$ LANGUAGE 'plpgsql';
